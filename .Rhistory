data <- read.csv("intro_to_ml/DataCoSupplyChainDataset.csv")
data <- read.csv("intro_to_ml/DataCoSupplyChainDataset.csv")
data <- read.csv("DataCoSupplyChainDataset.csv")
data <- read.csv("/home/andreg/Desktop/uni/intro_to_ml/DataCoSupplyChainDataset.csv")
data
plot(data)
plot(data)
ggplot(data)
library(ggplot2)
ggplot(data)
summary(data)
# non linear ----------
x <- runif(100); hist(x)
y <- -3+2*x^2 + rnorm(100, 0,0.2)
plot(x,y)
fit <- lm(y~x), summary(fit)
plot(x,y)
fit <- lm(y~x), summary(fit)
fit <- lm(y~x); summary(fit)
plot(x, resid(fit))
fit <- lm(y~I(x^2)); summary(fit)
plot(x, resid(fit))
y <- -3*2*x+rnorm(100, 0, x*0.5)
fit <- lm(y~x, weights=(1/x)^2)
summary(fit)
plot(x, resid(fit))
fit <- lm(y~x, weights=(1/x)^2)
summary(fit)
plot(x, resid(fit))
plot(x, resid(fit, type="pearson"))
plot(cars)
v1 <- c(na, 2, 3)
v1 <- c(NA, 2, 3)
v1 <- c(1, 2, 3)
v2 <- v1
v3 <-(NA, 4, 5)
v3 <- c(NA, 4, 5)
d$c1 <- v1
d <- data.frame(v1,v2,v3)
d
v1 <- c(1, 2, NA)
v2 <- v1
v3 <- c(NA, 4, 5)
d <- data.frame(v1,v2,v3)
which(is.na(d))
d
which(is.na(d))
print(d)
which(is.na(d))
print(d)
which(is.na(d))
print(d)
d <- d[-c(na_arr%%3),]
na_arr <- which(is.na(d))
d <- d[-c(na_arr%%3),]
d
data <- read.csv("/home/andreg/Desktop/btc/bitcoin_2014-10-19_2023-11-18.csv")
library(readr)
data <- read.csv("/home/andreg/Desktop/btc/bitcoin_2014-10-19_2023-11-18.csv")
library(ggplot2)
ggplot(data)
summary(data)
data2 <- data[,-(1,2)]
data2
data2 <- data[,-(1,2)]
data2 <- data[,-(1,2)]
data2 <- data[,-c(1,2)]
data2
data[6]
data[7] <- data[5]-data[3]
data[7]
summary[data]
summary[data2]
summary[data2]
summary(data2)
summary(data)
data$change <- data$Open-data$Close
data2 <- data[,-c(1,2)]
data2
summary(data2)
summary(data2)
data2 <- data2[,-c(1,2,3,4)]
summary(data2)
library(rpart)
tree <- rpart(change~Volume+Market.Cap)
tree <- rpart(change~Volume+Market.Cap, data =data2)
rpart.plot(tree)
plot.rpart(tree)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
# plot mytree
fancyRpartPlot(tree, caption = NULL)
install.packages("rattle")
library(rattle)
library(rpart.plot)
library(RColorBrewer)
# plot mytree
fancyRpartPlot(tree, caption = NULL)
library(readr)
data <- read.csv("/home/andreg/Desktop/btc/bitcoin_2014-10-19_2023-11-18.csv")
library(ggplot2)
data$change <- data$Open-data$Close
data2 <- data[,-c(1,2,3,4,5,6)]
library(readr)
data <- read.csv("/home/andreg/Desktop/btc/bitcoin_2014-10-19_2023-11-18.csv")
library(ggplot2)
data$change <- data$Open-data$Close
data2 <- data[,-c(1,2,3,4,5,6)]
library(rpart)
tree <- rpart(change~Volume+Market.Cap, data =data2)
plot.rpart(tree)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
# plot mytree
fancyRpartPlot(tree, caption = NULL)
summary(data2)
# plot mytree
fancyRpartPlot(tree, caption = NULL)
library(readr)
data <- read.csv("/home/andreg/Desktop/btc/bitcoin_2014-10-19_2023-11-18.csv")
library(ggplot2)
data$change <- data$Open-data$Close
data2 <- data[,-c(1,2,3,4,5,6)]
library(rpart)
tree <- rpart(change~Volume+Market.Cap, data =data2)
plot.rpart(tree)
summary(data2)
# plot mytree
fancyRpartPlot(tree, caption = NULL)
library(readr)
data <- read.csv("/home/andreg/Desktop/btc/bitcoin_2014-10-19_2023-11-18.csv")
library(ggplot2)
data$change <- data$Open-data$Close
data2 <- data[,-c(1,2)]
data2 <- data2[,-c(1,2,3,4)]
library(rpart)
tree <- rpart(change~Volume+Market.Cap, data =data2)
plot.rpart(tree)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
# plot mytree
fancyRpartPlot(tree, caption = NULL)
# plot mytree
fancyRpartPlot(tree, caption = NULL)
summary(data2)
data2 %>%
mutate (
result = case_when((change>=0) ~ "1",
(change<0) ~ "0")
)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
# plot mytree
fancyRpartPlot(tree, caption = NULL)
data2 %>%
mutate (
result = case_when((change>=0) ~ "1",
(change<0) ~ "0")
)
summary(data2)
data2 <-data2 %>%
mutate (
result = case_when((change>=0) ~ "1",
(change<0) ~ "0")
)
summary(data2)
data2$result <- factor(data2$result)
summary(data2)
data2 <- data2[,-c(3)]
summary(data2)
tree <- rpart(data2)
fancyRpartPlot(tree, caption = NULL)
tree <- rpart(result~Volume+Market.Cap, data=data2)
fancyRpartPlot(tree, caption = NULL)
rpart.plot(tree)
data2$result <- as.factor(data2$result)
data2 <- data2[,-c(3)]
summary(data2)
tree <- rpart(result~Volume+Market.Cap, data=data2)
plot(data2$result)
data2$result <- as.factor(data2$result)
data2$result <- factor(data2$result)
data2 <- data2[,-c(3)]
data2 <-data2 %>%
mutate (
result = case_when((change>=0) ~ "1",
(change<0) ~ "0")
)
data2$result <- factor(data2$result)
summary(data2)
library(ggplot2)
data$change <- data$Open-data$Close
data2 <- data[,-c(1,2)]
data2 <- data2[,-c(1,2,3,4)]
# let's try to
data2$grow <-
library(rpart)
tree <- rpart(change~Volume+Market.Cap, data =data2)
plot.rpart(tree)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(tidyverse)
# plot mytree
fancyRpartPlot(tree, caption = NULL)
data2 <-data2 %>%
mutate (
result = case_when((change>=0) ~ "1",
(change<0) ~ "0")
)
data2$result <- factor(data2$result)
data2 <- data2[,-c(3)]
summary(data2)
tree <- rpart(result~Volume+Market.Cap, data=data2)
rpart.plot(tree)
data2$result <- data2$result %>% lead()
summary(data2)
tree <- rpart(result~Volume+Market.Cap, data=data2)
rpart.plot(tree)
library(readr)
data <- read.csv("/home/andreg/Desktop/btc/bitcoin_2014-10-19_2023-11-18.csv")
library(ggplot2)
data$change <- data$Open-data$Close
data2 <- data[,-c(1,2)]
data2 <- data2[,-c(1,2,3,4)]
summary(data2)
plot(data2$Volume, data2$change)
plot(data2$Market.Cap, data2$change)
data2$nuovo
summary(data2)
data2$nuovo <- zeros(100)
data2$nuovo <- zeros(1,100)
data2$nuovo <- rep(0,100)
data2$nuovo <- rep(0,3317
)
data2$nuovo <- rep(0,3317)
summary(data2)
summary(data)
data$change <- data$Open-data$Close
var(seq(0,100,1))
var(seq(0,101,1))
var(seq(1,100,1))
x <- 0:100
x
var(x)
x[100]
x[101]
x[102]<-0
var(x)
m <- mean(x)
m2 <- mean(x^2)
m2-m^2
x <- 0:100
m <- mean(x)
m2-m^2
m2 <- mean(x^2)
m2-m^2
sum((x-m))^2/100
sum((x-m)^2)
data <- read.csv("/politics/politics.csv")
data <- read.csv("politics/politics.csv")
data <- read.csv("/home/andreg/Desktop/uni/intro_to_ml/lab3/politics/politics.csv")
summary(data)
pol_tweets$text <- data$text
pol_tweets <- data.frame()
pol_tweets$text <- data$text
pol_tweets <- data.frame("text")
pol_tweets$text <- data$text
pol_tweets <- data.frame(text)
pol_tweets$text <- data$text
pol_tweets <- data.frame(data$text)
pol_tweets
x <- runif(100, 0, 10)
e <- runif(100)
y <- 40.0-5.0*x+0.5*x^2+e
x1 <- x
x2 <- x^2
fit <- lm(y~x1+x2); summary(fit)
fit1 <- lm(y~x2); summary(fit1)
fit2 <- lm(y~x1); summary(fit2)
plot(x,y)
cor(x,y)
knitr::opts_chunk$set(echo = TRUE)
x <- 1
x <- runif(100, 0, 10)
e <- runif(100)
y <- 40.0-5.0*x+0.5*x^2+e
plot(x,y)
x1 <-x
x2 <- x^2
fit <- ln(y~x1+x2); summary(fit)
fit <- ln(y~x1+x2); summary(fit)
fit <- lm(y~x1+x2); summary(fit)
We observe that the R-squared is equal to 0.9963, that is, we can explain the 99.63% of the variability of the data.
knitr::opts_chunk$set(echo = TRUE)
plot(x,y)
```
x <- runif(100, 0, 10)
e <- runif(100)
y <- 40.0-5.0*x+0.5*x^2+e
plot(x,y)
```{r}
x1 <-x
x2 <- x^2
fit <- lm(y~x1+x2); summary(fit)
(b) ciaone
cor(x,y)
cor(y,x)
library(DAAG); y <- with(pair65, heated - ambietn)
library(DAAG); y <- with(pair65, heated - ambient)
n <- length(y); s_vect <- rep(0, n)
for(i in 1:n) s_vect[i] <- mean(y[-i])
Let's suppose that some values y are multiplied by a constant c. We have that
(a) Let's prove that $s_{cy}=cs_y$. We know that $s_y$ is the square of the variance and that the sample mean is homogeneous. We obtain
####################################
# Statistical Methods: Laboratory 5#
####################################
rm(list=ls())
setwd("C:/Users/gioia/Desktop/MaterialeDidattica/StatisticalMethodsDataSciencee/SMDS2324/Lab5")
library(DAAG)
y <- with(pair65, heated-ambient)
y
n <- length(y); s_vect <- rep(0,n)
n
for (i in 1:n) s_vect[i] <- mean(y[-i])
s_vect
SE_jack <- sqrt((n-1)/n * sum((s_vect-mean(s_vect)^2))
)
SE_jack <- sqrt((n-1)/n * sum((s_vect-mean(s_vect))^2))
load('kidneydata.Rdata')
install.packages("kidneydata")
install.packages("engsoccerdata")
data(package="engsoccerdata")    # lists datasets currently available
library(engsoccerdata)
library(devtools)
install_github('jalapic/engsoccerdata', username = "jalapic")
install.packages("devtools")
library(devtools)
install_github('jalapic/engsoccerdata', username = "jalapic")
data(package="engsoccerdata")    # lists datasets currently available
data
engsoccerdata
data(package="engsoccerdata")    # lists datasets currently available
italy
load(italy)
load('italy')
summary(itayl)
summary(italy)
barplot(prop.table(table(dfr$Response, dfr$Age), margin = 2), col = c("gray90", "blue"), density = fill_patterns),
df <- train_data[-c('Region_Code')]
load(file='datasets/train_data.RData')
##### Libraries and preliminaries #####
setwd("Desktop/uni/statistical_methods/final_project/stats_project")
load(file='datasets/test_data.RData')
load(file='datasets/train_data.RData')
df <- train_data[-c('Region_Code')]
df <- train_data[, -c('Region_Code')]
df <- subset(train_data, -c('Region_Code'))
library(ggplot2); library(car); library(mgcv); library(skimr); library(viridis)
library(psych); library(gridExtra); library(dplyr); library(skimr)
##### Libraries and preliminaries #####
setwd("Desktop/uni/statistical_methods/final_project/stats_project")
load(file='datasets/test_data.RData')
load(file='datasets/train_data.RData')
col_names(train_data)
colnames(train_data)
df <- select(train_data, -Region_Code, -Policy_Sales_Channel)
colnames(df)
names <- colnames(df)
names <- names[names != 'Response']
names
models <- list()
for (name in names) {
print(name)
formula_string <- paste("Response ~ . -", name)
model_formula <- as.formula(formula_string)
model <- glm(model_formula, data = df, family = binomial)
print(model$aic)
models[[name]] <- model
}
AIC(models)
aic_values <- sapply(models, AIC)
# Create a data frame
df <- data.frame(Model_Name = names, AIC = aic_values)
# Create a data frame
df_aic <- data.frame(Model_Name = names, AIC = aic_values)
df_aic
# Assuming df is your DataFrame
df_sorted <- df_aic[order(df$AIC), ]
print(df_sorted)
# Assuming df is your DataFrame
df_sorted <- df_aic[order(df_aic$AIC), ]
print(df_sorted)
load(file='datasets/test_data.RData')
load(file='datasets/train_data.RData')
colnames(train_data)
df <- select(train_data, -Region_Code, -Policy_Sales_Channel)
# Assuming df is your DataFrame
df_sorted <- df_aic[order(df_aic$AIC, decreasing=TRUE), ]
print(df_sorted)
# compute nested models
names_temp <- df_sorted$Model_Name
names_temp
# compute nested models
names_ord <- df_sorted$Model_Name
names_nested <- list()
nest_models <- list()
models_name[[name]] <- model
for (name in names_ord) {
names_nested <- c(names_nested, name)
model_formula <- reformulate(names_nested, response="Response")
model <- glm(model_formula, data = df, family = binomial)
models_name[[name]] <- model
}
for (name in names_ord) {
names_nested <- c(names_nested, name)
model_formula <- reformulate(names_nested, response="Response")
model <- glm(model_formula, data = df, family = binomial)
nest_models[[name]] <- model
}
names_ord
for (name in names_ord) {
names_nested <- c(names_nested, name)
formula_str <- paste(response_var, "~", paste(variable_names, collapse = " + "))
# Convert to formula
formula <- as.formula(formula_str)
model <- glm(formula, data = df, family = binomial)
nest_models[[name]] <- model
}
formula_str <- paste("Response", "~", paste(variable_names, collapse = " + "))
for (name in names_ord) {
names_nested <- c(names_nested, name)
formula_str <- paste("Response", "~", paste(variable_names, collapse = " + "))
# Convert to formula
formula <- as.formula(formula_str)
model <- glm(formula, data = df, family = binomial)
nest_models[[name]] <- model
}
formula_str <- paste("Response", "~", paste(nest_models, collapse = " + "))
for (name in names_ord) {
names_nested <- c(names_nested, name)
formula_str <- paste("Response", "~", paste(nest_models, collapse = " + "))
# Convert to formula
formula <- as.formula(formula_str)
model <- glm(formula, data = df, family = binomial)
nest_models[[name]] <- model
}
for (name in names_ord) {
names_nested <- append(names_nested, c(name))
formula_str <- paste("Response", "~", paste(nest_models, collapse = " + "))
# Convert to formula
formula <- as.formula(formula_str)
model <- glm(formula, data = df, family = binomial)
nest_models[[name]] <- model
}
names_nested <- c()
for (name in names_ord) {
names_nested <- c(names_nested, name)
formula_str <- paste("Response", "~", paste(nest_models, collapse = " + "))
# Convert to formula
formula <- as.formula(formula_str)
model <- glm(formula, data = df, family = binomial)
nest_models[[name]] <- model
}
for (name in names_ord) {
names_nested <- c(names_nested, name)
print(names_nested)
formula_str <- paste("Response", "~", paste(nest_models, collapse = " + "))
# Convert to formula
formula <- as.formula(formula_str)
model <- glm(formula, data = df, family = binomial)
nest_models[[name]] <- model
}
for (name in names_ord) {
print(paste('nome:', name))
names_nested <- c(names_nested, name)
print(names_nested)
formula_str <- paste("Response", "~", paste(nest_models, collapse = " + "))
# Convert to formula
formula <- as.formula(formula_str)
model <- glm(formula, data = df, family = binomial)
nest_models[[name]] <- model
}
# compute nested models
names_ord <- df_sorted$Model_Name
names_nested <- c()
nest_models <- list()
for (name in names_ord) {
print(paste('name:', name))
names_nested <- c(names_nested, name)
print(names_nested)
formula_str <- paste("Response", "~", paste(names_nested, collapse = " + "))
formula <- as.formula(formula_str)
model <- glm(formula, data = df, family = binomial)
nest_models[[name]] <- model
}
aic_values2 <- sapply(nest_models, AIC)
df_aic2 <- data.frame(Model_Name = names_ord, AIC = aic_values2)
df_aic2
# Assuming df is your DataFrame
df_sorted <- df_aic2[order(df_aic2$AIC, decreasing=TRUE), ]
df_sorted
# Assuming df is your DataFrame
df_sorted <- df_aic[order(df_aic$AIC, decreasing=TRUE), ]
df_sorted
# Assuming df is your DataFrame
df_sorted2 <- df_aic2[order(df_aic2$AIC, decreasing=TRUE), ]
df_sorted2
